# load packages
library(rvest)
library(stringr)
library(ggmap)
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities))
length(cities)
length(unique(cities))
?sort
sort(table(cities), decreasing = TRUE)[1:10]
library(rvest)
library(stringr)
library(ggmap)
## step 1: fetch list of cities with breweries
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities), decreasing = TRUE)[1:10]
cities <- unique(cities)
length(cities)
sort(table(cities), decreasing = TRUE)[1:10]
## step 1: fetch list of cities with breweries
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities), decreasing = TRUE)[1:10]
?geocode
pos <- geocode(unique(cities))
pos
View(pos)
warnings()
geocodeQueryCheck()
library(rvest)
library(stringr)
library(wordcloud)
url <- "http://www.nytimes.com"
html_parsed <- html(url, encoding = "UTF-8")
install.packages("wordcloud")
library(wordcloud)
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "story-heading", " " ))]' # use SelectorGadget to generate XPath expression
headings <- html_nodes(html_parsed, xpath = xpath)
headings <- html_text(headings)
headings
headings <- html_nodes(html_parsed, xpath = xpath) %>% html_text()
headings[1:10]
headings <- str_replace_all(headings, "\\n" , " ") %>% str_trim()
headings
wordcloud(headings)
?wordcloud
library(tidytext)
library(tidytext)
library(wordcloud)
?count
data("stop_words")
View(stop_words)
original_books <- austen_books()
unnest_tokens(headings)
headings()
?unnest_tokens
?wordcloud
data(crude)
install.packages("quanteda")
library(quanteda)
?textplot_wordcloud
tokens(headings)
?textplot_wordcloud
headings_tk <- tokens(headings)
textplot_wordcloud(headings_tk)
View(headings)
headings(headings)
View(stop_words)
?dfm
headings_dfm <- dfm(headings)
View(headings_dfm)
stopwords()
headings_dfm <- dfm(headings, remove = stopwords())
dim(headings_dfm)
textplot_wordcloud(headings_dfm)
headings_dfm <- dfm(headings, remove = stopwords(), remove_punkt = TRUE)
headings_dfm <- dfm(headings, remove = stopwords(), remove_punct = TRUE)
headings_dfm <- dfm(headings, remove = stopwords(), remove_punct = TRUE)
textplot_wordcloud(headings_dfm)
?textplot_wordcloud
1+2
1+2+
3
sum
1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
1 + 2 - 3 +
# - R is 'case sensitve'
sum(1,2)
Sum(1,2)
x <- log(10)
x
3,1415
mat <- matrix(c("this", "is", "a", "matrix"), nrow = 2, byrow = TRUE)
mat
mat[1,2]
mat[1,]
mat[,1]
mat <- matrix(c("this", "is", "a", "data frame"), nrow = 2, byrow = TRUE)
?read_csv
source("packages.r")
?read_csv
wage1 <- read_dta("../data/wage1.dta")
library(wooldridge)
install.packages("wooldridge")
library(wooldridge)
?wage1
summary(wage1)
str(wage1)
View(wage1)
hist(wage1$wage)
?hist
hist(wage1$wage)
hist(wage1$wage, freq = TRUE)
hist(wage1$wage, freq = FALSE)
wage1$wage
plot(wage1$educ, wage1$wage)
smoothingSpline = smooth.spline(wage1$educ, wage1$wage, spar = 0.3)
lines(smoothingSpline, col = "red")
model_out <- lm(wage ~ educ + female, data = wage1)
summary(model_out)
library(nycflights13)
?flights
View(flights)
head(flights)
nrow(flights)
table(flights$origin)
table(flights_sub$dest)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
flights_sub <- filter(flights, distance < 100)
table(flights_sub$dest)
flights_sub <- filter(flights, month == 1, day == 1, air_time > 60*7)
table(flights_sub$dest)
View(flights_sub)
?arrange
flights_sub <- arrange(flights, air_time, distance)
View(flights_sub)
flights_sub <- arrange(flights, desc(air_time), distance)
View(flights_sub)
flights_sub <-  select(flights, year, month, day)
head(flights_sub)
flights_sub <-  select(flights, -(dep_delay:time_hour))
head(flights_sub)
names(flights)
flights_sub <- rename(flights, tail_num = tailnum)
names(flights_sub)
flights_sub <- mutate(flights, gain = arr_delay - dep_delay,
speed = distance / air_time * 60)
names(flights_sub)
View(flights_sub)
flights_by_origin <- group_by(flights, origin)
class(flights_by_origin)
summarize(flights_by_origin, n_deps = n())
summarize(flights_by_origin, dep_delay = mean(dep_delay, na.rm = TRUE))
