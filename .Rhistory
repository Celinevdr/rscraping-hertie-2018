library(dplyr)
library(rvest)
dir.create("data/cses-pdfs", recursive = TRUE)
dir()
dir("data")
dir.create("data/cses-pdfs", recursive = TRUE)
dir()
dir("data")
?dir.create
dir.create("data/cses-pdfs")
baseurl <- "http://www.cses.org"
for (i in 1:10) {
filename <- basename(survey_pdfs[i])
if(!file.exists(paste0("data/cses-pdfs/", filename))){
download.file(paste0(baseurl, survey_pdfs[i]), destfile = paste0("data/cses-pdfs/", filename))
Sys.sleep(runif(1, 0, 1))
}
}
url <- "http://www.cses.org/datacenter/module4/module4.htm"
page_links <- read_html(url) %>% html_nodes("a") %>% html_attr("href")
survey_pdfs <- str_subset(page_links, "/survey")
survey_pdfs
baseurl <- "http://www.cses.org"
for (i in 1:10) {
filename <- basename(survey_pdfs[i])
if(!file.exists(paste0("data/cses-pdfs/", filename))){
download.file(paste0(baseurl, survey_pdfs[i]), destfile = paste0("data/cses-pdfs/", filename))
Sys.sleep(runif(1, 0, 1))
}
}
babynames1 <- mutate(babynames, name_short = substr(name, 1, 3))
View(babynames1)
?equals
?extract
?Aliases
?extract2
babynames1$ste <- babynames1$name_short == "Ste"
table(babynames1$ste)
babynames_ste <- filter(babynames1, ste == TRUE)
babynames_ste_grouped <- group_by(year, sex)
library(dplyr)
babynames_ste_grouped <- group_by(year, sex)
babynames_ste_grouped <- group_by(babynames_ste, year, sex)
babynames_ste_grouped <- summarize(babynames_ste_grouped, total = sum(n))
babynames_ste_grouped
qplot(year, total, color = sex, data = babynames_ste_grouped, geom = "line") + ggtitle('Names starting with "Ste"')
summary(babynames)
filter(babynames, year == 2015)
select(filter(babynames, year == 2015, sex = F), name, n)
select(filter(babynames, year == 2015, sex == F), name, n)
select(filter(babynames, year == 2015, sex == "F"), name, n)
arrange(select(filter(babynames, year == 2015, sex == "F"), name, n), desc(n))
arrange(select(filter(babynames, year == 2015, sex == "F"), name, n), desc(n))[1:10,]
# function that returns the mean of a vector
my_mean <- function(my_vector) {
mean <- sum(my_vector)/length(my_vector)
mean
}
my_mean(c(1, 2, 3))
my_mean
# another function that finds the remainder after division ("modulo operation)"
remainder <- function(num = 10, divisor = 4) {
remain <- num %% divisor
remain
}
remainder()
args(remainder)
# implement conditions
has_name <- function(x) {
nms <- names(x)
if (is.null(nms)) {
rep(FALSE, length(x))
} else {
!is.na(nms) & nms != ""
}
}
has_name(c(1, 2, 3))
has_name(mtcars)
has_name(mtcars)
sapply(mtcars, function(x) length(unique(x)))
# generate a sample dataset
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:5, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
# how to replace -99 with NA?
df$a[df$a == -99] <- NA
df$b[df$b == -99] <- NA
df$c[df$c == -98] <- NA
df$d[df$d == -99] <- NA
df$e[df$e == -99] <- NA
df$f[df$g == -99] <- NA
df <- data.frame(replicate(6, sample(c(1:5, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
# build function
missing_fixer <- function(x, na.value) {
x[x == na.value] <- NA
x
}
df[] <- lapply(df, missing_fixer, na.value = -99) # littler trick to make sure we get back a data frame, not a list
df
# easy to generalize to a subset of columns
df[1:3] <- lapply(df[1:3], missing_fixer, na.value = -99)
df
library(purrr)
library(repurrrsive)
install.packages("repurrrsive")
library(repurrrsive)
got_chars
class(got_chars)
str(got_chars)
?got_chars
got_chars[[1]]
map(got_chars[1:3], "name")
map(got_chars[1:3], "aliases")
map_chr(got_chars[1:3], "aliases")
list1 <- list(vec1, vec2, countries)
list1
list1[[1]]
list1[[3]][,2]
list1 <- list(vec1, vec2, babynames[1:5,])
list1
list1[[1]]
list1[[3]][,2]
names(list1)
names(list1) <- c("Vector1", "Vector2", "Data.Frame1")
list1$Vector1[1]
browseURL("https://jennybc.github.io/purrr-tutorial/")
?sapply
?tapply
library(nycflights13)
apply(flights, 2, mean)
apply(flights, 2, mean, na.rm = TRUE)
names(flights)
sapply(flights, class)
sapply(flights, class)
?keep
?select_if
flights_sub <- select_if(flights, is.numeric)
View(flights_sub)
flights_sub <- select_if(flights, is.numeric)
apply(flights_sub, 2, mean, na.rm = TRUE)
sapply(flights_sub, function(x), sd(x, na.rm = TRUE)/mean(x, na.rm = TRUE))
sapply(flights_sub, function(x) sd(x, na.rm = TRUE)/mean(x, na.rm = TRUE))
sapply(flights_sub, function(x) x - mean(x, na.rm = TRUE))
apply(flights_sub, 2, function(x) x - mean(x, na.rm = TRUE))
flights_sub_centered <- apply(flights_sub, 2, function(x) x - mean(x, na.rm = TRUE))
class(flights_sub_centered)
flights_sub_centered[] <- lapply(flights_sub, 2, function(x) x - mean(x, na.rm = TRUE))
flights_sub_centered[] <- lapply(flights_sub, function(x) x - mean(x, na.rm = TRUE))
class(flights_sub_centered)
flights_sub_centered[] <- sapply(flights_sub, function(x) x - mean(x, na.rm = TRUE))
class(flights_sub_centered)
flights_sub_centered[] <- apply(flights_sub, 2, function(x) x - mean(x, na.rm = TRUE))
class(flights_sub)
class(flights_sub_centered)
flights_sub_centered <- apply(flights_sub, 2, function(x) x - mean(x, na.rm = TRUE))
?class
flights_sub[] <- lapply(flights_sub, 2, function(x) x - mean(x, na.rm = TRUE))
flights_sub[] <- lapply(flights_sub, function(x) x - mean(x, na.rm = TRUE))
class(flights_sub)
sapply(flights_sub, mean, na.rm = TRUE)
library(dplyr)
library(rvest)
library(stringr)
url <- "http://www.cses.org/datacenter/module4/module4.htm"
page_links <- read_html(url) %>% html_nodes("a") %>% html_attr("href")
page_links <- read_html(url) %>% html_nodes("a") %>% html_attr("href")
survey_pdfs <- str_subset(page_links, "/survey")
dir.create("data/cses-pdfs", recursive = TRUE)
baseurl <- "http://www.cses.org"
for (i in 1:10) {
filename <- basename(survey_pdfs[i])
if(!file.exists(paste0("data/cses-pdfs/", filename))){
download.file(paste0(baseurl, survey_pdfs[i]), destfile = paste0("data/cses-pdfs/", filename))
Sys.sleep(runif(1, 0, 1))
}
}
length(list.files("data/cses-pdfs"))
list.files("data/cses-pdfs")
library(dplyr)
library(rvest)
library(stringr)
source("packages.r")
arrange(select(filter(babynames, year == 2015, sex == "F"), name, n), desc(n))[1:10,]
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% .[1:10,]
?extract2
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract(1:10)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract(1)
?extract
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract(., 1)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% `[`(1)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% `[`(1,)
x <- c(4,8,15,16,23,42)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract(1:10,)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract("1:10,")
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract(name)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% extract("name")
?select
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% select(1)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% select(1:10)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% select(1:10,)
?select
?pull
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% pull(1)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% pull(1:10)
?collect
?select
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% select(c(1:10))
x <- c(4,8,15,16,23,42)
x
length(x)
summary(x)
countries <- c("Germany", "France", "Netherlands", "Belgium")
countries
paste("Hello", "world!", sep = ", ")
paste0("Hello", "world!")
c(countries, "Poland")
mode(countries)
x > 15
x == sqrt(225)
y <- c(1,10,NA,7,NA,11)
sum(y)
sum(y, na.rm = TRUE)
!is.na(y) # not: y == NA
y*3
seq(1, 10, 2)
seq_along(x)
rep(c(1, 2, 3), 3)
rep(c(1, 2, 3), each = 2)
vec1 <- c(2, 20, -5, 1, 200)
vec2 <- seq(1, 5)
sort(vec1)
order(vec1, decreasing = FALSE)
vec1[order(vec1)]
vec3 <- c(1,10,NA,7,NA,11)
vec4 <- vec3[!is.na(vec3)]
vec4
z <- c(1,2,"Bavaria", 4)
z
str(z)
zz <- c(1,2,Bavaria,4,5,6) # error
Bavaria <- 3
zz <- c(1,2,Bavaria,4,5,6)
zz
str(zz)
zzchar <- as.character(zz)
zznum <- as.numeric(zzchar)
xzz <- c(x,zz)
countries[2]
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz[c(2, 5, 10)]
xzz[-1]
xzz[Bavaria]
xzz[seq(0, 10, by = 2)]
xzz[c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE)]
y
y[is.na(y)]
y[!is.na(y)]
y[y>5 | is.na(y)]
countries
countries[3] <- "Switzerland"
countries
xzz
xzz[c(1, 3, 5)] <- c(100,110,120)
xzz_new <- xzz
xzz_new[xzz <= 100] <- 0
xzz_new[xzz > 100] <- 1
xzz_new
list1 <- list(vec1, vec2, babynames[1:5,])
list1
list1[[1]]
list1[[3]][,2]
names(list1)
names(list1) <- c("Vector1", "Vector2", "Data.Frame1")
list1$Vector1[1]
song <- character()
for(i in 1:length(LETTERS)) {
song[i] <- paste0("Verse ", i, ": If you're happy and you know it, shout out ", LETTERS[i], "!")
}
song
# apply(): operating on matrices and arrays
(a <- matrix(1:20, nrow = 5))
apply(a, 1, mean)
apply(a, 2, mean)
head(mtcars)
select(mtcars, gear, carb) %>% apply(1, mean)
lapply(mtcars, is.numeric)
sapply(mtcars, is.numeric)
library(nycflights13)
library(dplyr)
library(babynames)
flights <- mutate(flights, net_delay = arr_delay - dep_delay)
View(flights)
View(flights)
getwd()
source("packages.r")
# traditional way of writing code
dat <- babynames
dim(dat)
dat_filtered <- filter(dat, name == "Kim")
dat_grouped <- group_by(dat_filtered, year, sex)
dat_sum <- summarize(dat_grouped, total = sum(n))
qplot(year, total, color = sex, data = dat_sum, geom = "line") +
ggtitle('People named "Kim"')
# traditional, even more awkward way of writing code
dat <- summarize(group_by(filter(babynames, name == "Kim"), year, sex), total = sum(n))
qplot(year, total, color = sex, data = dat, geom = "line") +  ggtitle('People named "Kim"')
babynames %>%
filter(name == "Kim") %>%  # check out ?extract2 for Aliases
group_by(year, sex)
out <- babynames %>%
filter(name == "Kim") %>%  # check out ?extract2 for Aliases
group_by(year, sex)
out
babynames %>%
filter(name == "Kim") %>%  # check out ?extract2 for Aliases
group_by(year, sex) -> out
out
babynames %>%
filter(name %>% equals("Kim")) %>%  # check out ?extract2 for Aliases
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, geom = "line") %>%
add(ggtitle('People named "Kim"')) %>% # add() is an alias for "+"
print
?qplot
1 + 2
1 %>% +2
1 %>% `+`2
1 %>% `+`(2)
?extract2
babynames %>% mutate(name_short = substr(name, 1, 3))
%>% filter(name_short == "Ste")
babynames %>% mutate(name_short = substr(name, 1, 3)) %>%
filter(name_short == "Ste") %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") + ggtitle('Names starting with "Ste"')
warnings()
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% head(10)
babynames %>% filter(year == 2015, sex == "F") %>% select(name, n) %>% arrange(desc(n)) %>% .[1:10,]
x <- c(4,8,15,16,23,42)
x
length(x)
length(babynames)
summary(x)
countries <- c("Germany", "France", "Netherlands", "Belgium")
countries
c(countries, "Poland")
mode(countries)
x > 15
x == sqrt(225)
babynames1 <- mutate(babynames, name_short = substr(name, 1, 3))
babynames1$ste <- babynames1$name_short == "Ste"
View(babynames1)
sum(y)
y <- c(1,10,NA,7,NA,11)
sum(y)
?sum
sum(y, na.rm = TRUE)
seq(1, 10, 2)
?seq
x
seq_along(x)
seq(1, length(x), 1)
?rep
rep(c(1, 2, 3), 3)
rep(c(1, 2, 3), each = 2)
vec1 <- c(2, 20, -5, 1, 200)
sort(vec1)
?sort
order(vec1, decreasing = FALSE)
dat <- data.frame(x, c(countries, "poland"))
dat <- data.frame(x, c(countries, "Poland", "Austria"))
dat
dat <- data.frame(var1 = x, var2 = c(countries, "Poland", "Austria"))
dat
arrange(dat, var1)
dat <- data.frame(var1 = vec1, var2 = c(countries, "Poland"))
dat
arrange(dat)
arrange(dat, var1)
dat[order(var1),]
dat[order(dat$var1),]
vec2 <- seq(1, 5)
vec1[order(vec1)]
vec4 <- vec3[!is.na(vec3)]
vec4
vec3 <- c(1,10,NA,7,NA,11)
vec4 <- vec3[!is.na(vec3)]
vec4
vec3[vec3 != NA]
z <- c(1,2,"Bavaria", 4)
z
z
str(z)
View(flights)
?read_csv
# variables
zz <- c(1,2,Bavaria,4,5,6) # error
Bavaria <- 3
zz <- c(1,2,Bavaria,4,5,6)
zz
str(zz)
zz
zzchar <- as.character(zz)
zzchar
zznum <- as.numeric(zzchar)
countries[2]
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz <- c(x,zz)
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz[c(2, 5, 10)]
xzz[-1]
zzchar
xzz
y
y[is.na(y)]
y[!is.na(y)]
y[y>5 | is.na(y)]
xzz
xzz[c(1, 3, 5)] <- c(100,110,120)
xzz_new <- xzz
xzz_new
xzz_new[xzz <= 100] <- 0
xzz_new[xzz > 100] <- 1
xzz_new
list1 <- list(vec1, vec2, babynames[1:5,])
list1
list1[[1]]
list1[[3]][,2]
names(list1)
names(list1) <- c("Vector1", "Vector2", "Data.Frame1")
names(list1)
list1
list1$Vector1[1]
song <- character()
song
for(i in 1:length(LETTERS)) {
song[i] <- paste0("Verse ", i, ": If you're happy and you know it, shout out ", LETTERS[i], "!")
}
song
LETTERS
letters
(a <- matrix(1:20, nrow = 5))
apply(a, 1, mean)
apply(a, 2, mean)
head(mtcars)
?mtcars
select(mtcars, gear, carb) %>% apply(1, mean)
lapply(mtcars, is.numeric)
sapply(mtcars, is.numeric)
lapply(mtcars, is.numeric) %>% unlist
my_mean <- function(my_vector) {
mean <- sum(my_vector)/length(my_vector)
mean
}
my_mean
my_mean()
my_mean(c(1, 2, 3))
my_mean <- function(my_vector = c(1, 2, 3, 4)) {
mean <- sum(my_vector)/length(my_vector)
mean
}
my_mean()
# function that returns the mean of a vector
my_mean <- function(my_vector) {
mean <- sum(my_vector)/length(my_vector)
mean
}
my_mean(c(1, 2, 3))
my_mean
my_mean(babynames)
my_mean(mtcars)
# another function that finds the remainder after division ("modulo operation)"
remainder <- function(num = 10, divisor = 4) {
remain <- num %% divisor
remain
}
remainder()
remainder(11, 3)
names(mtcars)
a
names(a)
has_name <- function(x) {
nms <- names(x)
if (is.null(nms)) {
rep(FALSE, length(x))
} else {
!is.na(nms) & nms != ""
}
}
has_name(c(1, 2, 3))
has_name(mtcars)
sapply(mtcars, function(x) length(unique(x)))
# generate a sample dataset
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:5, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
# build function
missing_fixer <- function(x, na.value) {
x[x == na.value] <- NA
x
}
df[] <- lapply(df, missing_fixer, na.value = -99) # littler trick to make sure we get back a data frame, not a list
df
library(haven)
?read_dta
?recode
